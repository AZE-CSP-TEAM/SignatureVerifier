name: "Deploy to NuGet"

on:
  push:
    branches:
      - main

env:
  PROJECT_PATH: 'SimaCryptoTool/SimaCryptoTool.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'    
  PACKAGE_NAME: 'SimaCryptoTool'
  TEST_PATH: 'CryptoToolTest/CryptoToolTest.csproj'

jobs:
  build:
    name: 'Build'
    runs-on: 'ubuntu-latest'
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: 'Install dotnet'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'
    - name: 'Restore packages'
      run: dotnet restore ${{ env.PROJECT_PATH }}
    - name: 'Build project'
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release

  test:
    name: 'Test .net 8 '
    runs-on: 'ubuntu-latest'
    needs: build
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2
    - name: 'Install dotnet'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'
    - name: 'Install Mono (for .NET Framework support)'
      run: sudo apt-get update && sudo apt-get install -y mono-devel
    - name: 'Run tests'
      run: dotnet test ${{ env.TEST_PATH }}

  version_and_deploy:
    name: 'Check Version and Deploy'
    runs-on: 'ubuntu-latest'
    needs: test
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: 'Fetch all tags'
      run: git fetch --tags --prune

    - name: 'Install dotnet'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: 'Get latest tag'
      id: get_tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
        echo "Latest tag: $latest_tag"

    - name: 'Calculate next available version'
      id: next_version
      run: |
        version=${{ env.latest_tag }}
        version=${version#v}
        IFS='.' read -ra parts <<< "$version"

        tag_exists() {
          git tag --list "v${parts[0]}.${parts[1]}.${parts[2]}" | grep -q "v${parts[0]}.${parts[1]}.${parts[2]}"
        }
        nuget_version_exists() {
          version_check="v${parts[0]}.${parts[1]}.${parts[2]}"
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.nuget.org/v3-flatcontainer/${{ env.PACKAGE_NAME }}/${version_check}/${version_check}.nupkg)
          [[ "$response" == "200" ]]
        }

        while tag_exists || nuget_version_exists; do
          parts[2]=$((parts[2]+1))
        done

        next_version="v${parts[0]}.${parts[1]}.${parts[2]}"
        next_version_no_v="${parts[0]}.${parts[1]}.${parts[2]}"
        echo "next_version=$next_version" >> $GITHUB_ENV
        echo "next_version_no_v=$next_version_no_v" >> $GITHUB_ENV
        echo "Next available version: $next_version"

    - name: Clear local NuGet package cache
      run: dotnet nuget locals all --clear
   
    - name: 'Rebuild project'
      run: |
        dotnet --version
        dotnet build ${{ env.PROJECT_PATH }}  --configuration Release

    - name: 'Pack project'
      run: |
        dotnet --version
        dotnet pack ${{ env.PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:PackageVersion=${{ env.next_version_no_v }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: 'Push package'
      run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.NUGET_KEY }} -s ${{ env.NUGET_SOURCE_URL }} --skip-duplicate

    - name: 'Create new tag'
      if: success()
      run: |
        git config --local user.name "github-actions"
        git config --local user.email "github-actions@github.com"
        git tag ${{ env.next_version }}
        git push origin ${{ env.next_version }}
